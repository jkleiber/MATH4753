#' @example violin(ddt$RIVER, ddt$LENGTH, ddt$SPECIES, "Violin Plot")
library(JKleiberPkg)
violin(ddt$RIVER, ddt$LENGTH, ddt$SPECIES, "plot")
library(JKleiberPkg)
ibrary(JKleiberPkg)
violin(ddt$RIVER, ddt$LENGTH, ddt$SPECIES, "plot")
violin(ddt, ddt$RIVER, ddt$LENGTH, ddt$SPECIES, "plot")
library(JKleiberPkg)
violin(ddt, ddt$RIVER, ddt$LENGTH, ddt$SPECIES, "plot")
?violin
library(JKleiberPkg)
library(JKleiberPkg)
violin(ddt, ddt$RIVER, ddt$LENGTH, ddt$SPECIES, "plot")
ddt=read.csv("DDT.csv",sep=",",header=TRUE)
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573/JKleiberPkg")
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573/Lab1")
ddt=read.csv("DDT.csv",sep=",",header=TRUE)
library(JKleiberPkg)
violin(ddt, ddt$RIVER, ddt$LENGTH, ddt$SPECIES, "plot")
I.df = myread("IRONORE.csv")
library(JKleiberPkg)
plotOutliers(I.df)
myread=function(csv){
fl=paste(dird,csv,sep="")
read.table(fl,header=TRUE,sep=",")
}
mpg.df=myread("EPAGAS.csv")
#or just use in an R script NOT in RMD!!!!
#I.df=read.table(file.choose(),header=TRUE,sep=",")
# in RMD use
I.df = myread("IRONORE.csv")
library(JKleiberPkg)
plotOutliers(I.df)
plotOutliers(mpg.df)
mpg.df=myread("EPAGAS.csv")
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573/Lab2")
mpg.df=myread("EPAGAS.csv")
myread=function(csv){
fl=paste(dird,csv,sep="")
read.table(fl,header=TRUE,sep=",")
}
mpg.df=myread("EPAGAS.csv")
mpg.df = read.csv("EPAGAS.csv")
library(JKleiberPkg)
plotOutliers(mpg.df)
plotOutliers(mpg.df$MPG)
library(JKleiberPkg)
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573/Lab2")
mpg.df = read.csv("EPAGAS.csv")
library(JKleiberPkg)
plotOutliers(mpg.df$MPG)
plotOutliers(mpg.df$MPG, "Yot")
plotOutliers(mpg.df$MPG, "Yot", c("Blue", "Green", "Pink"))
library(JKleiberPkg)
plotModel(spruce, spruce$BHDiameter, spruce$Height, spruce$BHDiameter, "Height vs Diameter")
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573/Lab3")
# Task 2
spruce = read.csv("SPRUCE.csv")
windows()
library(JKleiberPkg)
plotModel(spruce, spruce$BHDiameter, spruce$Height, spruce$BHDiameter, "Height vs Diameter")
library(JKleiberPkg)
library(JKleiberPkg)
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573/Lab4")
concrete = read.csv("Concrete_Data_Yeh.csv")
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573")
concrete = read.csv("Concrete_Data_Yeh.csv")
plot(concrete$fineaggregate, concrete$csMPa)
plot(concrete$watere, concrete$csMPa)
plot(concrete$water, concrete$csMPa)
plot(concrete$slag, concrete$csMPa)
plot(concrete$age, concrete$csMPa)
plot(concrete$cement, concrete$csMPa)
plot(concrete$superplasticizer, concrete$csMPa)
plot(concrete$coarseaggregate, concrete$csMPa)
insure = read.csv("insurance.csv")
plot(insure$age, insure$charges)
plot(insure$smoker, insure$charges)
plot(insure$children, insure$charges)
plot(insure$bmi, insure$charges)
salary = read.csv("Salary_Data.csv")
plot(salary$YearsExperience, salary$Salary)
head(salary)
dbinom(1:20, 20, 0.6)
dbinom(10, 20, 0.6)
round(dbinom(10, 20, 0.6), 4)
pbinom(7, 20, 0.6)
round(pbinom(7,20,0.60), 4)
1 - pbinom(12, 20, 0.6)
pbinom(9, 20, 0.6) - pbinom(6, 20, 0.6)
dbinom(4, 10, 0.3)
dpois(10,6)
1-ppois(6,6)
1-ppois(7,6)
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573/Lab5")
?sample
?dhyper
mysample=function(n, iter=10,time=0.5){
for( i in 1:iter){
#make a sample
s=sample(1:10,n,replace=TRUE)
# turn the sample into a factor
sf=factor(s,levels=1:10)
#make a barplot
barplot(table(sf)/n,beside=TRUE,col=rainbow(10),
main=paste("Example sample()", " iteration ", i, " n= ", n,sep="") ,
ylim=c(0,0.2)
)
#release the table
Sys.sleep(time)
}
}
mysample(n = 1000, iter = 30, time = 1)
dnegbinom
dnbinom
?dnbinom
library(JKleiberPkg)
library(JKleiberPkg)
?obinom
library(JKleiberPkg)
library(JKleiberPkg)
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Assignment2")
dbinom(3,10,0.25)
?dhyper
?pbinom
concrete_df = read.csv("Concrete_Data_Yeh.csv")
setwd("C:/Users/jklei/Desktop/Projects/MATH4753")
concrete_df = read.csv("Concrete_Data_Yeh.csv")
plot(concrete_df$cement, concrete_df$csMPa)
plot(concrete_df$slag, concrete_df$csMPa)
plot(concrete_df$flyash, concrete_df$csMPa)
plot(concrete_df$age, concrete_df$csMPa)
coplot(csMPa~flyash|age, data = concrete_df)
?cut
coplot(csMPa~flyash|age_intervals[age], data = concrete_df)
coplot(csMPa~flyash|age, data = concrete_df, number=5, columns = 5)
coplot(csMPa~flyash|age, data = concrete_df, number=10, columns = 10)
coplot(csMPa~flyash|age, data = concrete_df, number=5, columns = 5)
persp(concrete_df$age, concrete_df$flyash, concrete_df$csMPa)
cloud(concrete_df$csMPa~concrete_df$age*concrete_df$flyash)
library(lattice)
cloud(concrete_df$csMPa~concrete_df$age*concrete_df$flyash)
contourplot(concrete_df$csMPa~concrete_df$age*concrete_df$flyash)
levelplot(concrete_df$csMPa~concrete_df$age*concrete_df$flyash)
levelplot(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
cloud(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
hist(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
wireframe(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
contourplot(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
levelplot(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
levelplot(concrete_df$csMPa~concrete_df$coarseaggregate*concrete_df$fineaggregate)
levelplot(concrete_df$csMPa~concrete_df$coarseaggregate*concrete_df$fineaggregate, pretty = TRUE)
levelplot(concrete_df$csMPa~concrete_df$coarseaggregate*concrete_df$fineaggregate, data=concrete_df, pretty = TRUE)
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE)
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = rainbow(100))
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = rainbow(1000))
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = heat.colors(1000))
indows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = heat.colors(1000))
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = heat.colors(1000))
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = wesanderson(1000))
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = cm.colors(1000))
install.packages("viridis")
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
library(viridis)
library(viridis)
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
library(viridis)
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, interpolate=TRUE, col.regions = viridis(1000))
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, interpolate=TRUE, useRaster = TRUE, col.regions = viridis(1000))
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
levelplot(csMPa~water*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
View(concrete_df)
levelplot(csMPa~slag*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
windows()
levelplot(csMPa~slag*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
levelplot(csMPa~cement*slag, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
summary(concrete_df)
View(concrete_df)
View(concrete_df)
# Model the concrete data with an lm
concrete_lm = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
summary(concrete_lm)
# Model the concrete data with an lm
concrete_lm_1 = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
concrete_lm_1 = lm(csMPa ~ cement + slag + superplasticizer + water + age, data = concrete_df)
# Model the concrete data with an lm
concrete_lm_1 = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
csMPa
concrete_lm_2 = lm(csMPa ~ cement + slag + superplasticizer + water + age, data = concrete_df)
summary(concrete_lm_2)
cooks20x(concrete_lm_2)
library(s20x)
cooks20x(concrete_lm_2)
concrete_lm_2 = lm(csMPa ~ cement + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
summary(concrete_lm_2)
concrete_lm_2 = lm(csMPa ~ cement + superplasticizer + water + fineaggregate + coarseaggregate + age, data = concrete_df)
summary(concrete_lm_2)
concrete_lm_2 = lm(csMPa ~ cement + superplasticizer + water + fineaggregate + coarseaggregate, data = concrete_df)
summary(concrete_lm_2)
# Model the concrete data with an lm
concrete_lm_1 = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
summary(concrete_lm_1)
summary(concrete_df)
source('C:/Users/jklei/Desktop/Projects/ConcreteCanoe/concrete.R', echo=TRUE)
setwd("C:/Users/jklei/Desktop/Projects/ConcreteCanoe")
source('C:/Users/jklei/Desktop/Projects/ConcreteCanoe/concrete.R', echo=TRUE)
concretePrediction()
concretePrediction = function()
{
# Load concrete data
concrete_df = read.csv("Concrete_Data.csv")
# Model the concrete data
concrete_lm = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
# Get the data to predict
predict_df = read.csv("mix_data.csv")
# Test the data
predict(concrete_lm, predict_df)
}
concretePrediction()
concretePrediction()
concretePrediction()
concretePrediction()
concretePrediction()
source('C:/Users/jklei/Desktop/Projects/ConcreteCanoe/concrete_prediction.R')
source('C:/Users/jklei/Desktop/Projects/ConcreteCanoe/concrete_prediction.R', echo=TRUE)
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Assignment2")
?dmultinom
?pmultinom
pmultinom
dgeom(2, 0.4)
dgeom(3, 0.4)
dgeom(4, 0.4)
?dhyper
(-5)^7/7
(-5)^7/7 - 10(-5)^5 + 625(-5)^3/3
((-5)^7)/7 - 10(-5)^5 + 625((-5)^3)/3
((-5)^7)/7 - 10*(-5)^5 + 625*((-5)^3)/3
l = ((-5)^7)/7 - 10*(-5)^5 + 625*((-5)^3)/3
h = ((5)^7)/7 - 10*(5)^5 + 625*((5)^3)/3
h-l
d = h-l
d*9/(500^2)
yy = d*9/(500^2)
yy - 0.9375^2
.9375^2
h = ((5)^9)/9 - 50*(5)^7/7 + 625*((5)^5)/5
l = ((-5)^9)/9 - 50*(-5)^7/7 + 625*((-5)^5)/5
d = h - l
yy = d*9/(500^2)
yy - 0.9375^2
yy
.9375/60
2.692522 / 60
0.9375*60
2.692522*60
?qnorm
