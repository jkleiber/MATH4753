round(dbinom(10, 20, 0.6), 4)
pbinom(7, 20, 0.6)
round(pbinom(7,20,0.60), 4)
1 - pbinom(12, 20, 0.6)
pbinom(9, 20, 0.6) - pbinom(6, 20, 0.6)
dbinom(4, 10, 0.3)
dpois(10,6)
1-ppois(6,6)
1-ppois(7,6)
setwd("C:/Users/jklei/Google Drive/School/Fall 2019/MATH4573/Lab5")
?sample
?dhyper
mysample=function(n, iter=10,time=0.5){
for( i in 1:iter){
#make a sample
s=sample(1:10,n,replace=TRUE)
# turn the sample into a factor
sf=factor(s,levels=1:10)
#make a barplot
barplot(table(sf)/n,beside=TRUE,col=rainbow(10),
main=paste("Example sample()", " iteration ", i, " n= ", n,sep="") ,
ylim=c(0,0.2)
)
#release the table
Sys.sleep(time)
}
}
mysample(n = 1000, iter = 30, time = 1)
dnegbinom
dnbinom
?dnbinom
library(JKleiberPkg)
library(JKleiberPkg)
?obinom
library(JKleiberPkg)
library(JKleiberPkg)
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Assignment2")
dbinom(3,10,0.25)
?dhyper
?pbinom
concrete_df = read.csv("Concrete_Data_Yeh.csv")
setwd("C:/Users/jklei/Desktop/Projects/MATH4753")
concrete_df = read.csv("Concrete_Data_Yeh.csv")
plot(concrete_df$cement, concrete_df$csMPa)
plot(concrete_df$slag, concrete_df$csMPa)
plot(concrete_df$flyash, concrete_df$csMPa)
plot(concrete_df$age, concrete_df$csMPa)
coplot(csMPa~flyash|age, data = concrete_df)
?cut
coplot(csMPa~flyash|age_intervals[age], data = concrete_df)
coplot(csMPa~flyash|age, data = concrete_df, number=5, columns = 5)
coplot(csMPa~flyash|age, data = concrete_df, number=10, columns = 10)
coplot(csMPa~flyash|age, data = concrete_df, number=5, columns = 5)
persp(concrete_df$age, concrete_df$flyash, concrete_df$csMPa)
cloud(concrete_df$csMPa~concrete_df$age*concrete_df$flyash)
library(lattice)
cloud(concrete_df$csMPa~concrete_df$age*concrete_df$flyash)
contourplot(concrete_df$csMPa~concrete_df$age*concrete_df$flyash)
levelplot(concrete_df$csMPa~concrete_df$age*concrete_df$flyash)
levelplot(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
cloud(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
hist(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
wireframe(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
contourplot(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
levelplot(concrete_df$csMPa~concrete_df$superplasticizer*concrete_df$water)
levelplot(concrete_df$csMPa~concrete_df$coarseaggregate*concrete_df$fineaggregate)
levelplot(concrete_df$csMPa~concrete_df$coarseaggregate*concrete_df$fineaggregate, pretty = TRUE)
levelplot(concrete_df$csMPa~concrete_df$coarseaggregate*concrete_df$fineaggregate, data=concrete_df, pretty = TRUE)
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE)
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = rainbow(100))
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = rainbow(1000))
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = heat.colors(1000))
indows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = heat.colors(1000))
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = heat.colors(1000))
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = wesanderson(1000))
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = cm.colors(1000))
install.packages("viridis")
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
library(viridis)
library(viridis)
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
library(viridis)
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, interpolate=TRUE, col.regions = viridis(1000))
windows()
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, interpolate=TRUE, useRaster = TRUE, col.regions = viridis(1000))
levelplot(csMPa~coarseaggregate*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
levelplot(csMPa~water*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
View(concrete_df)
levelplot(csMPa~slag*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
windows()
levelplot(csMPa~slag*fineaggregate, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
levelplot(csMPa~cement*slag, data=concrete_df, pretty = TRUE, col.regions = viridis(1000))
summary(concrete_df)
View(concrete_df)
View(concrete_df)
# Model the concrete data with an lm
concrete_lm = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
summary(concrete_lm)
# Model the concrete data with an lm
concrete_lm_1 = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
concrete_lm_1 = lm(csMPa ~ cement + slag + superplasticizer + water + age, data = concrete_df)
# Model the concrete data with an lm
concrete_lm_1 = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
csMPa
concrete_lm_2 = lm(csMPa ~ cement + slag + superplasticizer + water + age, data = concrete_df)
summary(concrete_lm_2)
cooks20x(concrete_lm_2)
library(s20x)
cooks20x(concrete_lm_2)
concrete_lm_2 = lm(csMPa ~ cement + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
summary(concrete_lm_2)
concrete_lm_2 = lm(csMPa ~ cement + superplasticizer + water + fineaggregate + coarseaggregate + age, data = concrete_df)
summary(concrete_lm_2)
concrete_lm_2 = lm(csMPa ~ cement + superplasticizer + water + fineaggregate + coarseaggregate, data = concrete_df)
summary(concrete_lm_2)
# Model the concrete data with an lm
concrete_lm_1 = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
summary(concrete_lm_1)
summary(concrete_df)
source('C:/Users/jklei/Desktop/Projects/ConcreteCanoe/concrete.R', echo=TRUE)
setwd("C:/Users/jklei/Desktop/Projects/ConcreteCanoe")
source('C:/Users/jklei/Desktop/Projects/ConcreteCanoe/concrete.R', echo=TRUE)
concretePrediction()
concretePrediction = function()
{
# Load concrete data
concrete_df = read.csv("Concrete_Data.csv")
# Model the concrete data
concrete_lm = lm(csMPa ~ cement + slag + superplasticizer + water + fineaggregate + coarseaggregate + flyash + age, data = concrete_df)
# Get the data to predict
predict_df = read.csv("mix_data.csv")
# Test the data
predict(concrete_lm, predict_df)
}
concretePrediction()
concretePrediction()
concretePrediction()
concretePrediction()
concretePrediction()
source('C:/Users/jklei/Desktop/Projects/ConcreteCanoe/concrete_prediction.R')
source('C:/Users/jklei/Desktop/Projects/ConcreteCanoe/concrete_prediction.R', echo=TRUE)
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Assignment2")
?dmultinom
?pmultinom
pmultinom
dgeom(2, 0.4)
dgeom(3, 0.4)
dgeom(4, 0.4)
?dhyper
(-5)^7/7
(-5)^7/7 - 10(-5)^5 + 625(-5)^3/3
((-5)^7)/7 - 10(-5)^5 + 625((-5)^3)/3
((-5)^7)/7 - 10*(-5)^5 + 625*((-5)^3)/3
l = ((-5)^7)/7 - 10*(-5)^5 + 625*((-5)^3)/3
h = ((5)^7)/7 - 10*(5)^5 + 625*((5)^3)/3
h-l
d = h-l
d*9/(500^2)
yy = d*9/(500^2)
yy - 0.9375^2
.9375^2
h = ((5)^9)/9 - 50*(5)^7/7 + 625*((5)^5)/5
l = ((-5)^9)/9 - 50*(-5)^7/7 + 625*((-5)^5)/5
d = h - l
yy = d*9/(500^2)
yy - 0.9375^2
yy
.9375/60
2.692522 / 60
0.9375*60
2.692522*60
?qnorm
?pnorm
1-pnorm(12, 10, 4)
library(JKleiberPkg)
?JKleiberPkg::myncurve
library(JKleiberPkg)
3*18
9*16
install.packages("kableExtra")
dbinom(1, 7, 0.06)
dbinom(1, 1, 0.06)
dbinom(1, 7, 0.04)
dbinom(1, 7, 0.007)
dbinom(1, 7, 0.063)
dbinom(1, 2, 0.063)
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mylab7.R')
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mylab7.R')
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mytsim.R')
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mytsim.R')
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mytsim.R')
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mytsim.R')
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mytsim.R')
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mytsim.R')
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/mytsim.R')
windows()
myTsim(n1 = 10, iter = 1000, mean1 = 10, sigma1 = 4, ymax = 0.45)
#2
windows()
myTsim(n1 = 20, iter = 1000, mean1 = 10, sigma1 = 4, ymax = 0.45)
#3
windows()
myTsim(n1 = 100, iter = 1000, mean1 = 10, sigma1 = 4, ymax = 0.45)
#4
windows()
myTsim(n1 = 200, iter = 1000, mean1 = 10, sigma1 = 4, ymax = 0.45)
windows()
T = myTsim(n1 = 10, iter = 1500, mean1 = 20, sigma1 = 10, ymax = 0.45)
hist(T$w, col = rainbow(8))
windows()
T = myTsim(n1 = 10, iter = 1500, mean1 = 20, sigma1 = 10, ymax = 0.45)
hist(T$w, col = rainbow(8))
hist(T$w, col = rainbow(8))
windows()
myTsim(n1 = 10, iter = 1000, mean1 = 10, sigma1 = 4, ymax = 0.45)
windows()
myTsim(n1 = 20, iter = 1000, mean1 = 10, sigma1 = 4, ymax = 0.45)
windows()
myTsim(n1 = 100, iter = 1000, mean1 = 10, sigma1 = 4, ymax = 0.45)
windows()
myTsim(n1 = 200, iter = 1000, mean1 = 10, sigma1 = 4, ymax = 0.45)
windows()
T = myTsim(n1 = 10, iter = 1500, mean1 = 20, sigma1 = 10, ymax = 0.45)
windows()
hist(T$w, col = rainbow(8))
library(usethis)
install.packages("usethis")
fire=read.csv("FIREDAM.csv")
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Lab7")
fire=read.csv("FIREDAM.csv")
usethis::use_data(fire)
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/JKleiberPkg")
usethis::use_data(fire)
fire
usethis::use_data(fire)
load("C:/Users/jklei/Desktop/Projects/MATH4753/ILAS2019/data/ddt.rda")
library(JKleiberPkg)
source('C:/Users/jklei/Desktop/Projects/MATH4753/Lab7/Lab7-1.R')
myTsim2<-function(n1=10,n2=14,sigma1=3,sigma2=3,mean1=5,mean2=10,iter=1000,ymax=0.5,...){
y1=rnorm(n1*iter,mean=mean1,sd=sigma1)# generate iter samples of size n1
y2=rnorm(n2*iter,mean=mean2,sd=sigma2)
data1.mat=matrix(y1,nrow=n1,ncol=iter,byrow=TRUE) # Each column is a sample size n1
data2.mat=matrix(y2,nrow=n2,ncol=iter,byrow=TRUE)
ssq1=apply(data1.mat,2,var) # ssq1 is s squared
ybar1= apply(data1.mat,2,mean)
ssq2=apply(data2.mat,2,var)
ybar2=apply(data2.mat,2,mean)
spsq=((n1-1)*ssq1 + (n2-1)*ssq2)/(n1+n2-2) # pooled s squared
w=((ybar1-ybar2)-(mean1-mean2))/sqrt(spsq*(1/n1+1/n2))#sigma1=sigma2,  Chi square stat
hist(w,freq=FALSE, ylim=c(0,ymax), # Histogram with annotation
main=substitute(paste("Sample size = ",n[1]+n[2]," = ",n1+n2," statistic = ",T)),
xlab=paste(" T Statistic",sep=""), las=1)
lines(density(w),col="Blue",lwd=3) # add a density plot
curve(dt(x,n1+n2-2),add=TRUE,col="Red",lty=2,lwd=3) # add a theoretical curve
title=expression(T==frac((bar(Y)[1]-bar(Y)[2])-(mu[1]-mu[2]),S[p]*sqrt(frac(1,n[1])+frac(1,n[2])))) #mathematical annotation -see ?plotmath
legend(2,0.2,c("Simulated","Theoretical"),col=c("Blue","Red"),lwd=4,lty=1:2,bty="n",title=title)# Legend #
return(list(w=w,summary=summary(w),sdw=sd(w),fun="T")) # some output to use if needed
}
myTsim2(iter=10000)
myTsim2<-function(n1=10,n2=14,sigma1=3,sigma2=3,mean1=5,mean2=10,iter=1000,ymax=0.5,...){
y1=rnorm(n1*iter,mean=mean1,sd=sigma1)# generate iter samples of size n1
y2=rnorm(n2*iter,mean=mean2,sd=sigma2)
data1.mat=matrix(y1,nrow=n1,ncol=iter,byrow=TRUE) # Each column is a sample size n1
data2.mat=matrix(y2,nrow=n2,ncol=iter,byrow=TRUE)
ssq1=apply(data1.mat,2,var) # ssq1 is s squared
ybar1= apply(data1.mat,2,mean)
ssq2=apply(data2.mat,2,var)
ybar2=apply(data2.mat,2,mean)
spsq=((n1-1)*ssq1 + (n2-1)*ssq2)/(n1+n2-2) # pooled s squared
w=((ybar1-ybar2)-(mean1-mean2))/sqrt(spsq*(1/n1+1/n2))#sigma1=sigma2,  Chi square stat
hist(w,freq=FALSE, ylim=c(0,ymax), # Histogram with annotation
main=substitute(paste("Sample size = ",n[1]+n[2]," = ",n1+n2," statistic = ",T)),
xlab=paste(" T Statistic",sep=""), las=1)
lines(density(w),col="Blue",lwd=3) # add a density plot
curve(dt(x,n1+n2-2),add=TRUE,col="Red",lty=2,lwd=3) # add a theoretical curve
title=expression(T==frac((bar(Y)[1]-bar(Y)[2])-(mu[1]-mu[2]),S[p]*sqrt(frac(1,n[1])+frac(1,n[2])))) #mathematical annotation -see ?plotmath
legend(locator(1),c("Simulated","Theoretical"),col=c("Blue","Red"),lwd=4,lty=1:2,bty="n",title=title)# Legend #
return(list(w=w,summary=summary(w),sdw=sd(w),fun="T")) # some output to use if needed
}
myTsim2(iter=10000)
windows()
myTsim2(iter=10000)
?apply
install.packages("wesanderson")
10/12
# 1
phish = read.csv("PHISHING.csv")
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Assignment3")
phish[phish$]
# 1
phish = read.csv("PHISHING.csv")
head(phish)
length(phish[phish$INTTIME >= 120]) / length(phish)
length(phish[phish$INTTIME >= 120, ]) / length(phish)
length(phish)
length(phish[phish$INTTIME >= 120, ]) / length(phish$INTTIME)
95*95
3*.7^2
?dgamma
3*.07^2
3*.07
.21 + 3*sqrt(.0147)
gamma(1.5)
gamma(1.5)*2
4*(gamma(2) - gamma(1.5)^2)
s = 4*(gamma(2) - gamma(1.5)^2)
sqrt(s)
1.7725 - 2*(0.9265)
1.7725 + 2*0.9265
1.7725 + 3*0.9265
2/11
18/(11^2 * 12)
4*gamma(1.5)
16*(gamma(2) - gamma(1.5)^2)
matrix(0, nrow = 3, ncol = 3)
gamma(1)
knitr::opts_chunk$set(echo = TRUE)
jpd[,1] = jpd[,1] * c(-1, 0, 1)
1/1
1/12
1.5/12
9*60
1/540
20*.4*.6
/400
4.8/400
4.8/20
20*.4*.6
leadcopp = read.csv("LEADCOPP.csv")
1/180
head(leadcopp)
25/12
?apply
myclt=function(n,iter,a=0,b=5){
y=runif(n*iter,a,b)
data=matrix(y,nr=n,nc=iter,byrow=TRUE)
sm=apply(data,2,sum)
h=hist(sm,plot=FALSE)
hist(sm,col=rainbow(length(h$mids)),freq=FALSE,main="Distribution of the sum of uniforms")
curve(dnorm(x,mean=n*(a+b)/2,sd=sqrt(n*(b-a)^2/12)),add=TRUE,lwd=2,col="Blue")
sm
}
w=myclt(n=50,iter=10000,a=5,b=10)
w
library(JKleiberPkg)
# Lambda = 4
pois1 = mycltp(n=2, iter=10000, lambda = 4)
pois2 = mycltp(n=3, iter=10000, lambda = 4)
pois3 = mycltp(n=5, iter=10000, lambda = 4)
pois4 = mycltp(n=10, iter=10000, lambda = 4)
pois5 = mycltp(n=20, iter=10000, lambda = 4)
# Lambda = 10
pois1 = mycltp(n=2, iter=10000, lambda = 10)
pois2 = mycltp(n=3, iter=10000, lambda = 10)
pois3 = mycltp(n=5, iter=10000, lambda = 10)
pois4 = mycltp(n=10, iter=10000, lambda = 10)
pois5 = mycltp(n=20, iter=10000, lambda = 10)
# Lambda = 4
pois1 = mycltp(n=2, iter=10000, lambda = 4)
pois2 = mycltp(n=3, iter=10000, lambda = 4)
pois3 = mycltp(n=5, iter=10000, lambda = 4)
pois4 = mycltp(n=10, iter=10000, lambda = 4)
pois5 = mycltp(n=20, iter=10000, lambda = 4)
# Lambda = 10
pois1 = mycltp(n=2, iter=10000, lambda = 10)
pois2 = mycltp(n=3, iter=10000, lambda = 10)
pois3 = mycltp(n=5, iter=10000, lambda = 10)
pois4 = mycltp(n=10, iter=10000, lambda = 10)
pois5 = mycltp(n=20, iter=10000, lambda = 10)
set.seed(25)
n=30
alpha = 0.05
x = rnorm(n, 10, 8)
t = qt(1-alpha/2, n - 1)
mp = c(-1, 1)
ci = mean(x) + mp*t*sd(x)/sqrt(n)
ci
set.seed(25)
n=30
alpha = 0.1
x = rnorm(n, 10, 8)
t = qt(1-alpha/2, n - 1)
mp = c(-1, 1)
ci = mean(x) + mp*t*sd(x)/sqrt(n)
ci
set.seed(25)
n=30
alpha = 0.1
x = rnorm(n, 10, 8)
t = qt(1-alpha/2, n - 1)
mp = c(-1, 1)
ci = mean(x) + mp*t*sd(x)/sqrt(n)
ci
t.test(x, conf.level = 1 - alpha)$conf.int
t.test(x, conf.level = 1 - alpha)$conf.int
#15
solar = read.csv("SOLARAD.csv")
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Assignment3")
#15
solar = read.csv("SOLARAD.csv")
solar$STJOS - solar$IOWA
#16
diazinon = read.csv("DIAZINON.csv")
n=3
alpha = 0.05
x = c(3, 4, 5)
t = qt(1-alpha/2, n - 1)
mp = c(-1, 1)
ci = mean(x) + mp*t*sd(x)/sqrt(n)
ci
read.csv(file.choose())-> data
data$REAC.R
t.test(data$REAC.R,data$REAC.U)$conf
?quantile
knitr::opts_chunk$set(echo = TRUE)
unique(sample(sam, 20, replace = FALSE))
?rchisq
3/7
?distributions
$quantile
?quantile
?qnorm
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Lab9")
alpha = 0.05
za2 = qnorm(1-alpha/2, mean=0, sd=1)
stddev = sigma(sam)
# Sample
set.seed(68)
sam = rnorm(20, mean = 10, sd = 4)
# CI calcs
alpha = 0.05
za2 = qnorm(1-alpha/2, mean=0, sd=1)
stddev = sd(sam)
n = length(sam)
upper = mean(sam) + za2*stddev/sqrt(n)
lower = mean(sam) - za2*stddev/sqrt(n)
lower
upper
# Sample
set.seed(68)
sam = rnorm(20, mean = 10, sd = 4)
# CI calcs
alpha = 0.05
za2 = qnorm(1-alpha/2, mean=0, sd=1)
stddev = sd(sam)
n = length(sam)
upper = mean(sam) + za2*stddev/sqrt(n)
lower = mean(sam) - za2*stddev/sqrt(n)
lower
upper
library(JKleiberPkg)
library(JKleiberPkg)
JKleiberPkg::ddt
knitr::opts_chunk$set(echo = TRUE)
library(JKleiberPkg)
ddt = data("ddt")
obj = JKleiberPkg::myboot2(x = ddt$DDT)
library(JKleiberPkg)
data("ddt")
obj = JKleiberPkg::myboot2(x = ddt$DDT)
?outer
prod(dpois(c(4, 6, 7, 6, 5), 1))
dpois(12,1)*dpois(10,1)
2/9
sqrt(6)*3 + 2
3*sqrt(8)+2
1/6
library(JKleiberPkg)
library(JKleiberPkg)
1-pbinom(1, 7, 0.1)
1-pbinom(1, 7, 0.15)
1-pbinom(1, 7, 0.3)
birds = read.csv("NZBIRDS.csv")
setwd("C:/Users/jklei/Desktop/Projects/MATH4753/Assignment4")
birds = read.csv("NZBIRDS.csv")
rough = read.csv("ROUGHPIPE.csv")
lake = read.csv("WISCLAKES.csv")
trees = read.csv("ORCHARD.csv")
fog = trees[trees$CONDITION = "Fog",]
fog = trees[trees$CONDITION == "Fog",]
fog
trees
fog = trees[trees$CONDITION == "FOG",]
fog
gas = read.csv("GASTURBINE.csv")
head(gas)
aero = gas[gas$ENGINE == "Aeroderivative",]
aero
gas$ENGINE
aero = gas[gas$ENGINE == "Aeroderiv",]
aero
ants = read.csv("GOBIANTS.csv")
ants
dry = ants[ants$Region == "Dry Steppe", ]
dry
gobi = ants[ants$Region == "Gobi Desert", ]
gobi
?var.test
robot = read.csv("THRUPUT.csv")
head(robot)
set.seed(35)
sam<-round(rnorm(30,mean=20,sd=3),3)
t.test(sam)
stest = t.test(sam)
stest$statistic
qt(1-0.05/2, 28)
qt(1-0.05/2, 29)
