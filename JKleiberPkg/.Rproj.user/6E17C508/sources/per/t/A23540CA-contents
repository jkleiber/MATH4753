---
title: "Lab 4: MATH 4753"
author: "Justin Kleiber"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: yes
    toc_float: yes
    theme: spacelab
    highlight: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Task 1

First, the working directory is confirmed

```{r}
getwd()
```

# Task 2
A binomial distribution can be simulated using the `mybin()` function declared below.
```{r}
## sampling function
# iter = iterations, n=sample size
# set default values
mybin=function(iter=100,n=10, p=0.5){ 
  # make a matrix to hold the samples
  #initially filled with NA's
  sam.mat=matrix(NA,nr=n,nc=iter, byrow=TRUE)
  
  #Make a vector to hold the number of successes in each trial
  succ=c()
  
  for( i in 1:iter){
    #Fill each column with a new sample
    sam.mat[,i]=sample(c(1,0),n,replace=TRUE, prob=c(p,1-p))
    #Calculate a statistic from the sample (this case it is the sum)
    succ[i]=sum(sam.mat[,i])
  }
  
  #Make a table of successes
  succ.tab=table(factor(succ,levels=0:n))
  
  #Make a barplot of the proportions
  barplot(succ.tab/(iter), col=rainbow(n+1), main="Binomial simulation", xlab="Number of successes")
  succ.tab/iter
}
```

For n=10 and p=0.7, at  
* 100 iterations:
```{r}
mybin(iter=100, n=10, p=0.7)
```

* 200 iterations:
```{r}
mybin(iter=200, n=10, p=0.7)
```

* 500 iterations:
```{r}
mybin(iter=500, n=10, p=0.7)
```

* 1000 iterations:
```{r}
mybin(iter=1000, n=10, p=0.7)
```


* 10000 iterations:
```{r}
mybin(iter=10000, n=10, p=0.7)
```

The table from the 10,000 iteration case is repeated below  
0      1      2      3      4      5      6      7      8      9    
## 0.0000 0.0001 0.0017 0.0112 0.0371 0.1037 0.2017 0.2651 0.2328 0.1177   
##     10   
## 0.0289  

Using `dbinom` these values can be verified:
```{r}
validator = function(size=10) {
  vals = c()
  for (i in 1:size)
  {
    vals[i] = dbinom(i,10,0.7)
  }
  
  vals.df = data.frame(vals)
  vals.df
}

validator()
```

And as seen, the values produced by `dbinom` are close to those in the 10,000 iteration simulation.


# Task 3
Creating a sample of 5 marbles without replacement:
```{r}
marbles = sample(1:20, 5, replace = FALSE)
```

Number of white marbles:
```{r}
length(marbles[marbles <= 12])
```

Number of black marbles
```{r}
length(marbles[marbles > 12])
```

Creating a sample of 5 marbles with replacement:
```{r}
marbles = sample(1:20, 5, replace = TRUE)
```

Number of white marbles:
```{r}
length(marbles[marbles <= 12])
```

Number of black marbles
```{r}
length(marbles[marbles > 12])
```


The following function is used to simulate a hypergeometric distribution:
```{r}
myhyper=function(iter=100,N=20,r=12,n=5){
  # make a matrix to hold the samples
  #initially filled with NA's
  sam.mat=matrix(NA,nr=n,nc=iter, byrow=TRUE)
  
  #Make a vector to hold the number of successes over the trials
  succ=c()
  for( i in 1:iter){
    #Fill each column with a new sample
    sam.mat[,i]=sample(rep(c(1,0),c(r,N-r)),n,replace=FALSE)
    #Calculate a statistic from the sample (this case it is the sum)
    succ[i]=sum(sam.mat[,i])
  }
  
  #Make a table of successes
  succ.tab=table(factor(succ,levels=0:n))
  
  #Make a barplot of the proportions
  barplot(succ.tab/(iter), col=rainbow(n+1), main="HYPERGEOMETRIC simulation", xlab="Number of successes")
  
  succ.tab/iter
}
```

* 100 iterations:
```{r}
myhyper(iter=100)
```

* 200 iterations:
```{r}
myhyper(iter=200)
```

* 500 iterations:
```{r}
myhyper(iter=500)
```

* 1000 iterations:
```{r}
myhyper(iter=1000)
```

* 10000 iterations:
```{r}
myhyper(iter=10000)
```

The table for the 10,000 iteration step is below:  
##   
##      0      1      2      3      4      5    
## 0.0042 0.0550 0.2292 0.3975 0.2635 0.0506   

Using `dhyper` these values can be validated:
```{r}
validator = function(size=5) {
  vals = c()
  for (i in 1:size)
  {
    vals[i] = dhyper(i,12,8,size)
  }
  
  vals.df = data.frame(vals)
  vals.df
}

validator()
```

From this analysis, it can be seen that the iterative values are close to the `dhyper` values


# Task 4
The `mysample` function looks like it will make a sample and then plot the relative frequency of each possible value in the sample. Every loop it has a delay to show the plot and then it will move to the next one.

```{r, eval=FALSE}
mysample=function(n, iter=10,time=0.5){
  for( i in 1:iter){
    #make a sample
    s=sample(1:10,n,replace=TRUE)
    # turn the sample into a factor
    sf=factor(s,levels=1:10)
    #make a barplot
    barplot(table(sf)/n,beside=TRUE,col=rainbow(10), 
    main=paste("Example sample()", " iteration ", i, " n= ", n,sep="") ,
    ylim=c(0,0.2)
    )
    
    #release the table
    Sys.sleep(time)
  }
}

mysample(n = 1000, iter = 30, time = 1)
```

If the above function was run in a script, the relative frequency graph of the random samples is shown as a sort of animation.  

Here is an example of one frame of the 'animation'

```{r}
mysample=function(n, iter=10,time=0.5){
  for( i in 1:iter){
    #make a sample
    s=sample(1:10,n,replace=TRUE)
    # turn the sample into a factor
    sf=factor(s,levels=1:10)
    #make a barplot
    barplot(table(sf)/n,beside=TRUE,col=rainbow(10), 
    main=paste("Example sample()", " iteration ", i, " n= ", n,sep="") ,
    ylim=c(0,0.2)
    )
    
    #release the table
    Sys.sleep(time)
  }
}

mysample(n = 1000, iter = 1, time = 1)
```


# Task 5

Calculating 8 choose 4 is done in R as follows:
```{r}
choose(8,4)
```

We can use `ppois` to calculate the likelihood of a value being above 4 in a Poisson distribution (for $\lambda = 2$):
```{r}
1 - ppois(4, 2)
```

Calculating the probability of y=10 in a negative binomial with p=0.4 and r = 3:
```{r}
dnbinom(10-3, size=3, prob=0.4)
```

Calculating the probability of y <= 8 in a binomial distribution:
```{r}
pbinom(8, 15, 0.4)
```


# Task 6
```{r}
library(JKleiberPkg)
JKleiberPkg::obinom(6, 0.8)
```




